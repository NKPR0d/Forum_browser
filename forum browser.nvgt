#include "include/*.nvgt"
topic[] topics;
post[] posts;
menu m;
touch_gesture_manager touch;
string[] rooms={"https://forum.audiogames.net/forum/6/general-game-discussion/", "https://forum.audiogames.net/forum/25/new-releases-room/", "https://forum.audiogames.net/forum/28/developers-room/", "https://forum.audiogames.net/forum/21/offtopic-room/", "https://forum.audiogames.net/forum/20/audiogames-news-room/", "https://forum.audiogames.net/forum/27/articles-room/", "https://forum.audiogames.net/forum/18/site-and-forum-feedback/", "https://forum.audiogames.net/forum/26/audiogames-exclusive-games/", "https://forum.audiogames.net/forum/30/trash/"};
string[] bads={"<p>", "</p>", "a href=\"", "</a>", "<h1>", "<h2>", "<h3>", "<h4>", "<h5>", "<h6>", "</h1>", "</h2>", "</h3>", "</h4>", "</h5>", "</h6>", "<br />", "&#039;", "<li>", "</li>", "<ul>", "</ul>", "&nbsp;"};
string[]goods={"", "\r\n", "", "", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "\r\n", "'", "", "", "", "", ""};
int room, page=1, old_page, last_page;
string room_url, topic_url;
class topic {
int id;
string name;
string int_name;
string author;
}
class post {
int num;
string author;
string rank;
string status;
string date;
string post;
}

void main() {
touch_keyboard_interface ti(touch, {{"swipe_left1f", KEY_UP}, {"swipe_right1f", KEY_DOWN}, {"swipe_up1f", KEY_LEFT}, {"swipe_down1f", KEY_RIGHT}, {"double_tap1f", KEY_RETURN}, {"swipe_left2f", KEY_ESCAPE}, {"double_tap2f", KEY_SPACE}});
touch.add_touch_interface(ti);
show_window("Audiogames forum browser");
select_room();
}
void select_room() {
reset();
m.reset(true);
m.intro_text="Please select a forum room for which to view topics from.";
string[] items = {"General Game Discussion", "New Releases Room", "Developers room", "Off-topic room", "AudioGames - News room", "Articles Room", "Site and forum feedback", "Audiogames Exclusive Games", "Trash", "Exit"};
m.add_items(items);
int mres=m.run();
if(mres==-1 || mres==items.length()-1) exit();
else{
room=mres;
show_topics();
}
}
void show_topics() {
topics.resize(0);
room_url=url_get(rooms[room]+"/page/"+page);
string temp=rooms[room];
string[] lines=string_split(room_url, "</span> <a href=\"https://forum.audiogames.net/topic/", true);
last_page=parse_int(return_until(lines[0], "/", "<link rel=\"last\" href=\""+temp+"page/"));
lines.remove_at(0);
for(int x=0; x<lines.length(); x++) {
topic new;
string temp=return_until(lines[x], "/", "");
new.id=string_to_number(temp);
string temp2=return_until(lines[x], "/", temp+"/");
new.int_name=temp2;
string temp3=return_until(lines[x], "<", ">");
new.name=temp3;
new.name=string_replace(new.name, "&#039;", "'", true);
string temp4=return_until(lines[x], "<", "starter\">by <cite>");
new.author=temp4;
topics.insert_last(new);
}
for(int x=0; x<topics.length(); x++) {
int temp5=string_to_number(topics[x].name);
if(temp5!=0) {
topics.remove_at(x);
}
}
if(topics.length()<=1) {
speak("There was an error retrieving topics from this room. Please confirm that your internet connection is stable and try again.");
reset();
select_room();
}
else {
m.reset(true);
@m.background_callback = topic_callback;
m.intro_text="Topics list. Page "+page+" of "+last_page;
string[] items;
for(int x=0; x<topics.length(); x++) items.insert_last(topics[x].name+" posted by "+topics[x].author);
items.insert_last("Go back");
m.add_items(items);
int mres=m.run();
if(mres==-1 || mres==items.length()-1) {
reset();
select_room();
}
else {
old_page=page;
page=1;
topic_url="https://forum.audiogames.net/topic/"+topics[mres].id+"/"+topics[mres].int_name+"/";
parse_posts(topic_url);
}
}
}
void show_posts(bool reset=true) {
if(reset) m.reset(true);
@m.background_callback = post_callback;
m.intro_text="Posts list. Page "+page+" of "+last_page;
string[] items;
for(int x=0; x<posts.length(); x++) items.insert_last(posts[x].num+". Posted by "+posts[x].author+". Post: "+posts[x].post+"\r\n"+posts[x].date);
items.insert_last("Go back");
m.add_items(items);
int mres=m.run();
if(mres==-1 || mres==items.length()-1) {
page=old_page;
old_page=0;
show_topics();
}
else {
clipboard_copy_text(posts[mres].post);
speak("The post was copied to the clipboard.");
show_posts(false);
}
}
void topic_callback(menu@ m, string data) {
if(key_pressed(KEY_SPACE)) {
int p=numbox("Please enter a page to jump to.");
if(p>last_page) speak("This page does not exist.");
else if(p==0) speak("Canceled.");
else{
page=p;
speak("Page "+page);
topics.resize(0);
show_topics();
}
}
if(key_pressed(KEY_RIGHT) && page<last_page) {
page++;
speak("Page "+page);
topics.resize(0);
show_topics();
}
if(key_pressed(KEY_LEFT)&&page>1) {
page--;
speak("Page "+page);
topics.resize(0);
show_topics();
}
}
void post_callback(menu@ m, string data) {
if(key_pressed(KEY_SPACE)) {
int p=numbox("Please enter a page to jump to.");
if(p>last_page) speak("This page does not exist.");
else if(p==0) speak("Canceled.");
else{
page=p;
speak("Page "+page);
parse_posts(topic_url, page);
}
}
if(key_pressed(KEY_RIGHT) && page<last_page) {
page++;
speak("Page "+page);
parse_posts(topic_url, page);
}
if(key_pressed(KEY_LEFT)&&page>1) {
page--;
speak("Page "+page);
parse_posts(topic_url, page);
}
}
void reset() {
topics.resize(0);
posts.resize(0);
old_page=0;
page=1;
room=0;
}
void parse_posts(string url, int page=1){
string topic_page=url_get(url+"page/"+page);
posts.resize(0);
string[] lines=string_split(topic_page, ">#", true);
if(string_contains(lines[0], "link rel=\"last\"", 1)>=0) last_page=parse_int(return_until(lines[0], "/", "<link rel=\"last\" href=\""+url+"page/"));
else last_page=1;
lines.remove_at(0);
for(int x=0; x<lines.length(); x++) {
post new;
string temp=return_until(lines[x], "<", "");
new.num=parse_int(temp);
string temp2=return_until(lines[x], "'", "<a title=\"Go to ");
new.author=temp2;
string temp3=return_until(lines[x], "<", "class=\"usertitle\"><span>");
new.rank=temp3;
string temp4=return_until(lines[x], "<", "class=\"post-link\">");
new.date=temp4;
string temp5=return_until(lines[x], "	", "<p>");
new.post=temp5;
for(uint i=0; i<bads.length(); i++) new.post=string_replace(new.post, bads[i], goods[i], true);
if(string_contains(new.post, "cdn-cgi/l/email-protection\" class", 1)>=0) {
string encdata=return_until(new.post, "\"", "cfemail=\"");
string email=decode_cloudflare_email(encdata);
new.post=string_replace(new.post, "/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\""+encdata+"\">[email&#160;protected]", email, true);
}
posts.insert_last(new);
}
show_posts();
}
string decode_cloudflare_email(string encoded_email){
if (encoded_email.length() < 2) return "";
int key = parse_int(encoded_email.substr(0, 2), 16);
string decoded_email;
for (int i = 2; i < encoded_email.length(); i += 2){
int byte = parse_int(encoded_email.substr(i, 2), 16) ^ key;
decoded_email += ascii_to_character(byte);
}
return decoded_email;
}
string return_until(string text, string char, string start) {
int starting=0;
string ret;
if(start!="") {
starting=string_contains(text, start, 1);
starting+=start.length();
}
if(starting<0) {
return "";
}
for(int x=starting; x<text.length(); x++) {
if(text[x]!=char) {
ret+=text[x];
}
if(text[x]==char) {
break;
}
}
return ret;
}
int numbox(string intro, bool mobile=false)
{
speak(intro);
string input;
string c;
while(true)
{
wait(2);
if(touch.is_available()){
touch.monitor();
c=get_characters_android();
}
else c=get_characters();
if (c.is_digits())
{
speak(c);
input+=c;
}
if (key_pressed(KEY_BACK) and input.length()>0)
{
string l=input[input.length()-1];
input.erase(input.length()-1,1);
speak(l);
}
if (key_pressed(KEY_ESCAPE))
{
break;
}
if (key_pressed(KEY_RETURN))
{
return parse_int(input);
}
}
return 0;
}

//Android stuff
string get_characters_android()
{
string char;
string keys="abcdefghijklmnopqrstuvwxyz";
if (key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
keys+="1234567890";
for (uint i=0; i<keys.length(); i++)
{
if (key_pressed(i+4))
char=keys[i];
}
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
if (key_pressed(KEY_1))
char="!";
else if (key_pressed(KEY_2))
char="@";
else if (key_pressed(KEY_3))
char="#";
else if (key_pressed(KEY_4))
char="$";
else if (key_pressed(KEY_5))
char="%";
else if (key_pressed(KEY_6))
char="^";
else if (key_pressed(KEY_7))
char="&";
else if (key_pressed(KEY_8))
char="*";
else if (key_pressed(KEY_9))
char="(";
else if (key_pressed(KEY_0))
char=")";
else if (key_pressed(KEY_DASH))
char="_";
else if (key_pressed(KEY_EQUALS))
char="+";
else
char=char.upper();
}
if (key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if (key_pressed(KEY_DASH))
char="-";
if (key_pressed(KEY_EQUALS))
char="=";
}
if (key_pressed(KEY_SPACE))
char=" ";
if (key_pressed(KEY_COMMA))
char=",";
if (key_pressed(KEY_PERIOD))
char=".";
if (key_pressed(KEY_SEMICOLON))
char=";";
if (key_pressed(KEY_SLASH))
char="/";
if (key_pressed(KEY_APOSTROPHE))
char="'";
return char;
}
